name: Build Production Docker Images

on:
  push:
    branches:
      - main

jobs:
  build-api:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/koru-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,priority=2000
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Get image tag
        id: image
        run: echo "tag=$(echo '${{ steps.meta.outputs.tags }}' | head -n 1)" >> $GITHUB_OUTPUT

      - name: Build API
        uses: docker/build-push-action@v3
        with:
          context: .
          file: apps/api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-web:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/koru-web
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,priority=2000
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Get image tag
        id: image
        run: echo "tag=$(echo '${{ steps.meta.outputs.tags }}' | head -n 1)" >> $GITHUB_OUTPUT

      - name: Build Web
        uses: docker/build-push-action@v3
        with:
          context: .
          file: apps/web/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-email:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/koru-email
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,priority=2000
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Get image tag
        id: image
        run: echo "tag=$(echo '${{ steps.meta.outputs.tags }}' | head -n 1)" >> $GITHUB_OUTPUT

      - name: Build Web
        uses: docker/build-push-action@v3
        with:
          context: .
          file: services/email/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  update-k8s-manifests:
    needs: [build-api, build-web]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout K8s config repo
        uses: actions/checkout@v3
        with:
          repository: jamdon2/koru-infra
          token: ${{ secrets.INFRA_REPO_TOKEN }}

      - name: Update API image tag
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
          yq e '.spec.template.spec.containers[0].image = "${{ needs.build-api.outputs.image }}"' -i koru-manifests/api-deployment.yaml
          yq e '.spec.template.spec.containers[0].image = "${{ needs.build-api.outputs.image }}"' -i koru-manifests/api-celery-deployment.yaml

      - name: Update Web image tag
        run: |
          yq e '.spec.template.spec.containers[0].image = "${{ needs.build-web.outputs.image }}"' -i koru-manifests/web-deployment.yaml

      - name: Update Email image tag
        run: |
          yq e '.spec.template.spec.containers[0].image = "${{ needs.build-email.outputs.image }}"' -i koru-manifests/email-deployment.yaml

      - name: Commit and push changes
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions-bot@github.com'
          git add .
          # Check if there are changes to commit
          if ! git diff --staged --quiet; then
            git commit -m "Update image tags\n\n${{ needs.build-api.outputs.image }} ${{ needs.build-web.outputs.image }} ${{ needs.build-email.outputs.image }}"
            git push
          else
            echo "No image changes to commit."
          fi
