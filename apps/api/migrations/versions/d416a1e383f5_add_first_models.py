"""add first models

Revision ID: d416a1e383f5
Revises: d3766e1daeaf
Create Date: 2025-06-01 21:43:22.121326

"""
from collections.abc import Sequence

import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from alembic import op


# revision identifiers, used by Alembic.
revision: str = 'd416a1e383f5'
down_revision: str | None = 'd3766e1daeaf'
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('account',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('currency', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('account_type', sa.Enum('CASH', 'BANK_GOCARDLESS', 'BANK_MANUAL', name='accounttype'), nullable=False),
    sa.Column('iban', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('bban', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('bic', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('scan_code', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('internal_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('owner_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('usage_type', sa.Enum('PERSONAL', 'BUSINESS', name='usagetype'), nullable=True),
    sa.Column('iso_account_type', sa.Enum('CACC', 'CARD', 'CASH', 'CHAR', 'CISH', 'COMM', 'CPAC', 'LLSV', 'LOAN', 'MGLD', 'MOMA', 'NREX', 'ODFT', 'ONDP', 'OTHR', 'SACC', 'SLRY', 'SVGS', 'TAXE', 'TRAN', 'TRAS', 'VACC', 'NFCA', name='isoaccounttype'), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('counterparty',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('creator_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('iban', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('bban', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['creator_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('transaction',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('account_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('raw_counterparty_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('currency', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('native_amount', sa.Float(), nullable=False),
    sa.Column('opposing_counterparty_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('opposing_account_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('gocardless_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('internal_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('booking_time', sa.DateTime(), nullable=False),
    sa.Column('value_time', sa.DateTime(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['account.id'], ),
    sa.ForeignKeyConstraint(['opposing_account_id'], ['account.id'], ),
    sa.ForeignKeyConstraint(['opposing_counterparty_id'], ['counterparty.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('gocardless_id')
    )
    op.add_column('user', sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False))
    op.add_column('user', sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('user', 'updated_at')
    op.drop_column('user', 'created_at')
    op.drop_table('transaction')
    op.drop_table('counterparty')
    op.drop_table('account')
    op.execute('DROP TYPE accounttype;')
    op.execute('DROP TYPE usagetype;')
    op.execute('DROP TYPE isoaccounttype;')
    # ### end Alembic commands ###
