// This file is auto-generated by @hey-api/openapi-ts

export type BodyPasswordLogin = {
  grant_type?: string | null;
  username: string;
  password: string;
  scope?: string;
  client_id?: string | null;
  client_secret?: string | null;
};

export type ErrorResponse = {
  detail: string;
};

export type HttpValidationError = {
  detail?: Array<ValidationError>;
};

export type MessageResponse = {
  message: string;
};

export type UserCreate = {
  first_name: string;
  last_name: string;
  email: string;
  password: string;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type PasswordLoginData = {
  body: BodyPasswordLogin;
  headers: {
    "hcaptcha-token": string;
  };
  path?: never;
  query?: never;
  url: "/auth/login/password";
};

export type PasswordLoginErrors = {
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type PasswordLoginError = PasswordLoginErrors[keyof PasswordLoginErrors];

export type PasswordLoginResponses = {
  /**
   * Successful Response
   */
  200: MessageResponse;
};

export type PasswordLoginResponse =
  PasswordLoginResponses[keyof PasswordLoginResponses];

export type RegisterData = {
  body: UserCreate;
  headers: {
    "hcaptcha-token": string;
  };
  path?: never;
  query?: never;
  url: "/auth/register";
};

export type RegisterErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type RegisterError = RegisterErrors[keyof RegisterErrors];

export type RegisterResponses = {
  /**
   * Successful Response
   */
  200: MessageResponse;
};

export type RegisterResponse = RegisterResponses[keyof RegisterResponses];

export type ConfirmEmailData = {
  body?: never;
  path: {
    email_token: string;
  };
  query?: never;
  url: "/auth/confirm-email/{email_token}";
};

export type ConfirmEmailErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ConfirmEmailError = ConfirmEmailErrors[keyof ConfirmEmailErrors];

export type ConfirmEmailResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type RefreshTokenData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/refresh";
};

export type RefreshTokenErrors = {
  /**
   * Unauthorized
   */
  401: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type RefreshTokenError = RefreshTokenErrors[keyof RefreshTokenErrors];

export type RefreshTokenResponses = {
  /**
   * Successful Response
   */
  200: MessageResponse;
};

export type RefreshTokenResponse =
  RefreshTokenResponses[keyof RefreshTokenResponses];

export type LogoutData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/logout";
};

export type LogoutErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type LogoutError = LogoutErrors[keyof LogoutErrors];

export type LogoutResponses = {
  /**
   * Successful Response
   */
  200: MessageResponse;
};

export type LogoutResponse = LogoutResponses[keyof LogoutResponses];

export type JoinWaitlistData = {
  body?: never;
  path?: never;
  query: {
    email: string;
  };
  url: "/waitlist/join";
};

export type JoinWaitlistErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type JoinWaitlistError = JoinWaitlistErrors[keyof JoinWaitlistErrors];

export type JoinWaitlistResponses = {
  /**
   * Successful Response
   */
  200: MessageResponse;
};

export type JoinWaitlistResponse =
  JoinWaitlistResponses[keyof JoinWaitlistResponses];

export type ConfirmWaitlistData = {
  body?: never;
  path: {
    waitlist_token: string;
  };
  query?: never;
  url: "/waitlist/confirm/{waitlist_token}";
};

export type ConfirmWaitlistErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ConfirmWaitlistError =
  ConfirmWaitlistErrors[keyof ConfirmWaitlistErrors];

export type ConfirmWaitlistResponses = {
  /**
   * Successful Response
   */
  200: unknown;
};

export type RootData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/";
};

export type RootResponses = {
  /**
   * Successful Response
   */
  200: MessageResponse;
};

export type RootResponse = RootResponses[keyof RootResponses];

export type HelloWorldData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/hello";
};

export type HelloWorldResponses = {
  /**
   * Successful Response
   */
  200: MessageResponse;
};

export type HelloWorldResponse = HelloWorldResponses[keyof HelloWorldResponses];

export type PingData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/ping";
};

export type PingErrors = {
  /**
   * Authentication failed.
   */
  401: ErrorResponse;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type PingError = PingErrors[keyof PingErrors];

export type PingResponses = {
  /**
   * Successful Response
   */
  200: MessageResponse;
};

export type PingResponse = PingResponses[keyof PingResponses];

export type GetHcaptchaSitekeyData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/hcaptcha/sitekey";
};

export type GetHcaptchaSitekeyResponses = {
  /**
   * Successful Response
   */
  200: MessageResponse;
};

export type GetHcaptchaSitekeyResponse =
  GetHcaptchaSitekeyResponses[keyof GetHcaptchaSitekeyResponses];

export type ClientOptions = {
  baseUrl: `${string}://${string}` | (string & {});
};
