// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  passwordLogin,
  register,
  confirmEmail,
  refreshToken,
  logout,
  joinWaitlist,
  confirmWaitlist,
  importGocardless,
  root,
  helloWorld,
  ping,
  getHcaptchaSitekey,
} from "../sdk.gen";
import { queryOptions, type UseMutationOptions } from "@tanstack/react-query";
import type {
  PasswordLoginData,
  PasswordLoginError,
  PasswordLoginResponse,
  RegisterData,
  RegisterError,
  RegisterResponse,
  ConfirmEmailData,
  RefreshTokenData,
  RefreshTokenError,
  RefreshTokenResponse,
  LogoutData,
  LogoutError,
  LogoutResponse,
  JoinWaitlistData,
  JoinWaitlistError,
  JoinWaitlistResponse,
  ConfirmWaitlistData,
  ImportGocardlessData,
  ImportGocardlessError,
  ImportGocardlessResponse,
  RootData,
  HelloWorldData,
  PingData,
  GetHcaptchaSitekeyData,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const passwordLoginQueryKey = (options: Options<PasswordLoginData>) =>
  createQueryKey("passwordLogin", options);

/**
 * Password Login
 */
export const passwordLoginOptions = (options: Options<PasswordLoginData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await passwordLogin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: passwordLoginQueryKey(options),
  });
};

/**
 * Password Login
 */
export const passwordLoginMutation = (
  options?: Partial<Options<PasswordLoginData>>
): UseMutationOptions<
  PasswordLoginResponse,
  PasswordLoginError,
  Options<PasswordLoginData>
> => {
  const mutationOptions: UseMutationOptions<
    PasswordLoginResponse,
    PasswordLoginError,
    Options<PasswordLoginData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await passwordLogin({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const registerQueryKey = (options: Options<RegisterData>) =>
  createQueryKey("register", options);

/**
 * Register
 */
export const registerOptions = (options: Options<RegisterData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await register({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: registerQueryKey(options),
  });
};

/**
 * Register
 */
export const registerMutation = (
  options?: Partial<Options<RegisterData>>
): UseMutationOptions<
  RegisterResponse,
  RegisterError,
  Options<RegisterData>
> => {
  const mutationOptions: UseMutationOptions<
    RegisterResponse,
    RegisterError,
    Options<RegisterData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await register({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const confirmEmailQueryKey = (options: Options<ConfirmEmailData>) =>
  createQueryKey("confirmEmail", options);

/**
 * Confirm Email
 */
export const confirmEmailOptions = (options: Options<ConfirmEmailData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await confirmEmail({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: confirmEmailQueryKey(options),
  });
};

export const refreshTokenQueryKey = (options: Options<RefreshTokenData>) =>
  createQueryKey("refreshToken", options);

/**
 * Refresh Token
 */
export const refreshTokenOptions = (options: Options<RefreshTokenData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await refreshToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: refreshTokenQueryKey(options),
  });
};

/**
 * Refresh Token
 */
export const refreshTokenMutation = (
  options?: Partial<Options<RefreshTokenData>>
): UseMutationOptions<
  RefreshTokenResponse,
  RefreshTokenError,
  Options<RefreshTokenData>
> => {
  const mutationOptions: UseMutationOptions<
    RefreshTokenResponse,
    RefreshTokenError,
    Options<RefreshTokenData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await refreshToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const logoutQueryKey = (options?: Options<LogoutData>) =>
  createQueryKey("logout", options);

/**
 * Logout
 */
export const logoutOptions = (options?: Options<LogoutData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await logout({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: logoutQueryKey(options),
  });
};

/**
 * Logout
 */
export const logoutMutation = (
  options?: Partial<Options<LogoutData>>
): UseMutationOptions<LogoutResponse, LogoutError, Options<LogoutData>> => {
  const mutationOptions: UseMutationOptions<
    LogoutResponse,
    LogoutError,
    Options<LogoutData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await logout({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const joinWaitlistQueryKey = (options: Options<JoinWaitlistData>) =>
  createQueryKey("joinWaitlist", options);

/**
 * Join Waitlist
 */
export const joinWaitlistOptions = (options: Options<JoinWaitlistData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await joinWaitlist({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: joinWaitlistQueryKey(options),
  });
};

/**
 * Join Waitlist
 */
export const joinWaitlistMutation = (
  options?: Partial<Options<JoinWaitlistData>>
): UseMutationOptions<
  JoinWaitlistResponse,
  JoinWaitlistError,
  Options<JoinWaitlistData>
> => {
  const mutationOptions: UseMutationOptions<
    JoinWaitlistResponse,
    JoinWaitlistError,
    Options<JoinWaitlistData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await joinWaitlist({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const confirmWaitlistQueryKey = (
  options: Options<ConfirmWaitlistData>
) => createQueryKey("confirmWaitlist", options);

/**
 * Confirm Waitlist
 */
export const confirmWaitlistOptions = (
  options: Options<ConfirmWaitlistData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await confirmWaitlist({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: confirmWaitlistQueryKey(options),
  });
};

export const importGocardlessQueryKey = (
  options: Options<ImportGocardlessData>
) => createQueryKey("importGocardless", options);

/**
 * Import Gocardless
 */
export const importGocardlessOptions = (
  options: Options<ImportGocardlessData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await importGocardless({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: importGocardlessQueryKey(options),
  });
};

/**
 * Import Gocardless
 */
export const importGocardlessMutation = (
  options?: Partial<Options<ImportGocardlessData>>
): UseMutationOptions<
  ImportGocardlessResponse,
  ImportGocardlessError,
  Options<ImportGocardlessData>
> => {
  const mutationOptions: UseMutationOptions<
    ImportGocardlessResponse,
    ImportGocardlessError,
    Options<ImportGocardlessData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await importGocardless({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const rootQueryKey = (options?: Options<RootData>) =>
  createQueryKey("root", options);

/**
 * Root
 */
export const rootOptions = (options?: Options<RootData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await root({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: rootQueryKey(options),
  });
};

export const helloWorldQueryKey = (options?: Options<HelloWorldData>) =>
  createQueryKey("helloWorld", options);

/**
 * Hello World
 */
export const helloWorldOptions = (options?: Options<HelloWorldData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await helloWorld({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: helloWorldQueryKey(options),
  });
};

export const pingQueryKey = (options: Options<PingData>) =>
  createQueryKey("ping", options);

/**
 * Ping
 */
export const pingOptions = (options: Options<PingData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ping({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: pingQueryKey(options),
  });
};

export const getHcaptchaSitekeyQueryKey = (
  options?: Options<GetHcaptchaSitekeyData>
) => createQueryKey("getHcaptchaSitekey", options);

/**
 * Get Hcaptcha Sitekey
 */
export const getHcaptchaSitekeyOptions = (
  options?: Options<GetHcaptchaSitekeyData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getHcaptchaSitekey({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getHcaptchaSitekeyQueryKey(options),
  });
};
