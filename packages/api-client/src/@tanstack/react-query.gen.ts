// This file is auto-generated by @hey-api/openapi-ts

import { type Options, root, helloWorld, ping, createUser } from "../sdk.gen";
import { queryOptions, type UseMutationOptions } from "@tanstack/react-query";
import type {
  RootData,
  HelloWorldData,
  PingData,
  CreateUserData,
  CreateUserError,
  CreateUserResponse,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const rootQueryKey = (options?: Options<RootData>) =>
  createQueryKey("root", options);

export const rootOptions = (options?: Options<RootData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await root({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: rootQueryKey(options),
  });
};

export const helloWorldQueryKey = (options?: Options<HelloWorldData>) =>
  createQueryKey("helloWorld", options);

export const helloWorldOptions = (options?: Options<HelloWorldData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await helloWorld({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: helloWorldQueryKey(options),
  });
};

export const pingQueryKey = (options?: Options<PingData>) =>
  createQueryKey("ping", options);

export const pingOptions = (options?: Options<PingData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ping({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: pingQueryKey(options),
  });
};

export const createUserQueryKey = (options: Options<CreateUserData>) =>
  createQueryKey("createUser", options);

export const createUserOptions = (options: Options<CreateUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createUserQueryKey(options),
  });
};

export const createUserMutation = (
  options?: Partial<Options<CreateUserData>>
): UseMutationOptions<
  CreateUserResponse,
  CreateUserError,
  Options<CreateUserData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateUserResponse,
    CreateUserError,
    Options<CreateUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
