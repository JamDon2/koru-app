/**
 * Generated by Orval 0.1.0 for Zod Schemas 🍺
 * Do not edit manually. Regenerate with "pnpm generate:api-client".
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { HTTPValidationError, MessageResponse, User } from "../../model";

import { customInstance } from "../../lib/axiosInstance";
import type { ErrorType } from "../../lib/axiosInstance";

/**
 * @summary Root
 */
export const root = (signal?: AbortSignal) => {
  return customInstance<MessageResponse>({ url: `/`, method: "GET", signal });
};

export const getRootQueryKey = () => {
  return [`/`] as const;
};

export const getRootQueryOptions = <
  TData = Awaited<ReturnType<typeof root>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof root>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getRootQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof root>>> = ({
    signal,
  }) => root(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof root>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RootQueryResult = NonNullable<Awaited<ReturnType<typeof root>>>;
export type RootQueryError = ErrorType<unknown>;

export function useRoot<
  TData = Awaited<ReturnType<typeof root>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof root>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof root>>,
          TError,
          Awaited<ReturnType<typeof root>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRoot<
  TData = Awaited<ReturnType<typeof root>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof root>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof root>>,
          TError,
          Awaited<ReturnType<typeof root>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useRoot<
  TData = Awaited<ReturnType<typeof root>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof root>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Root
 */

export function useRoot<
  TData = Awaited<ReturnType<typeof root>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof root>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getRootQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Hello World
 */
export const helloWorld = (signal?: AbortSignal) => {
  return customInstance<MessageResponse>({
    url: `/hello`,
    method: "GET",
    signal,
  });
};

export const getHelloWorldQueryKey = () => {
  return [`/hello`] as const;
};

export const getHelloWorldQueryOptions = <
  TData = Awaited<ReturnType<typeof helloWorld>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof helloWorld>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getHelloWorldQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof helloWorld>>> = ({
    signal,
  }) => helloWorld(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof helloWorld>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type HelloWorldQueryResult = NonNullable<
  Awaited<ReturnType<typeof helloWorld>>
>;
export type HelloWorldQueryError = ErrorType<unknown>;

export function useHelloWorld<
  TData = Awaited<ReturnType<typeof helloWorld>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof helloWorld>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof helloWorld>>,
          TError,
          Awaited<ReturnType<typeof helloWorld>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHelloWorld<
  TData = Awaited<ReturnType<typeof helloWorld>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof helloWorld>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof helloWorld>>,
          TError,
          Awaited<ReturnType<typeof helloWorld>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useHelloWorld<
  TData = Awaited<ReturnType<typeof helloWorld>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof helloWorld>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Hello World
 */

export function useHelloWorld<
  TData = Awaited<ReturnType<typeof helloWorld>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof helloWorld>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getHelloWorldQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Create User
 */
export const createUser = (user: User, signal?: AbortSignal) => {
  return customInstance<MessageResponse>({
    url: `/users`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: user,
    signal,
  });
};

export const getCreateUserMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUser>>,
    TError,
    { data: User },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createUser>>,
  TError,
  { data: User },
  TContext
> => {
  const mutationKey = ["createUser"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createUser>>,
    { data: User }
  > = (props) => {
    const { data } = props ?? {};

    return createUser(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof createUser>>
>;
export type CreateUserMutationBody = User;
export type CreateUserMutationError = ErrorType<HTTPValidationError>;

/**
 * @summary Create User
 */
export const useCreateUser = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createUser>>,
      TError,
      { data: User },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof createUser>>,
  TError,
  { data: User },
  TContext
> => {
  const mutationOptions = getCreateUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
